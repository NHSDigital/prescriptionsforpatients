AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  prescriptions for patients api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 50
    MemorySize: 256
    Architectures:
      - x86_64
    Runtime: nodejs18.x
    Environment:
      Variables:
        TargetSpineServer: !Ref TargetSpineServer
        NODE_OPTIONS: --enable-source-maps
        SpinePrivateKeyARN: !ImportValue account-resources:SpinePrivateKey
        SpinePublicCertificateARN: !ImportValue account-resources:SpinePublicCertificate
        SpineASIDARN: !ImportValue account-resources:SpineASID
        SpinePartyKeyARN: !ImportValue account-resources:SpinePartyKey
        SpineCAChainARN: !ImportValue account-resources:SpineCAChain

Parameters:
  TargetSpineServer:
    Type: String
    Description: TargetSpineServer
    Default: none
  SplunkHECToken:
    Type: String
    Description: HEC Token for Cloudformation to Splunk Firehose
    Default: none
  SplunkHECEndpoint:
    Type: String
    Description: HEC Endpoint for Cloudformation to Splunk Firehose
    Default: none
  TruststoreVersion:
    Type: String
    Description: TruststoreVersion
    Default: none
  EnableMutualTLS:
    Type: String
    Description: Whether to use mutual TLS
    Default: false
    AllowedValues: [true, false]
  EnableSplunk:
    Type: String
    Description: Whether to use splunk
    Default: false
    AllowedValues: [true, false]
  VersionNumber:
    Type: String
    Description: Current release version
    Default: "xxx"
  CommitId:
    Type: String
    Description: Most recent commit hash
    Default: "xxx"
  LogLevel:
    Type: String
    Description: The log level to set in the lambda
    Default: "INFO"
  LogRetentionDays:
    Type: Number
    Description: How long to keep logs for
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1096,
        1827,
        2192,
        2557,
        2922,
        3288,
        3653,
      ]

Conditions:
  ShouldUseMutualTLS: !Equals [true, !Ref EnableMutualTLS]
  ShouldUseSplunk: !Equals [true, !Ref EnableSplunk]

Resources:
  SplunkFirehose:
    Type: AWS::Serverless::Application
    Properties:
      Location: splunk_firehose_resources.yaml
      Parameters:
        SplunkHECToken: !Ref SplunkHECToken
        SplunkHECEndpoint: !Ref SplunkHECEndpoint
        EnableSplunk: !Ref EnableSplunk
        LogRetentionDays: !Ref LogRetentionDays

  GetSecretsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: get-secrets-layer
      Description: get secrets layer
      ContentUri: ../packages/getSecretLayer/lib/get-secrets-layer.zip
      RetentionPolicy: Retain

  # getMyPrescription lambda
  GetMyPrescriptionsResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: lambda_resources.yaml
      Parameters:
        CloudWatchKMSKey: !GetAtt SplunkFirehose.Outputs.CloudWatchKMSKey
        SplunkSubscriptionFilterRole: !GetAtt SplunkFirehose.Outputs.SplunkSubscriptionFilterRole
        SplunkDeliveryStream: !GetAtt SplunkFirehose.Outputs.SplunkDeliveryStream
        EnableSplunk: !Ref EnableSplunk
        LambdaName: !Sub "${AWS::StackName}-GetMyPrescriptions"
        AccessToSpine: "true"
        LogRetentionDays: !Ref LogRetentionDays
  GetMyPrescriptions:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetMyPrescriptions"
      CodeUri: ../packages
      Handler: getMyPrescriptions.handler
      Role: !GetAtt GetMyPrescriptionsResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/get-secrets-layer
          LOG_LEVEL: !Ref LogLevel
      Layers:
        - !Ref GetSecretsLayer
      Events:
        getMyPrescriptions:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /Bundle
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: getMyPrescriptions/tsconfig.json
        EntryPoints:
          - getMyPrescriptions/src/getMyPrescriptions.ts

  # capabilityStatement lambda
  CapabilityStatementResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: lambda_resources.yaml
      Parameters:
        CloudWatchKMSKey: !GetAtt SplunkFirehose.Outputs.CloudWatchKMSKey
        SplunkSubscriptionFilterRole: !GetAtt SplunkFirehose.Outputs.SplunkSubscriptionFilterRole
        SplunkDeliveryStream: !GetAtt SplunkFirehose.Outputs.SplunkDeliveryStream
        EnableSplunk: !Ref EnableSplunk
        LambdaName: !Sub "${AWS::StackName}-CapabilityStatement"
        LogRetentionDays: !Ref LogRetentionDays
  CapabilityStatement:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-CapabilityStatement"
      CodeUri: ../packages
      Handler: capabilityStatement.handler
      Role: !GetAtt CapabilityStatementResources.Outputs.LambdaRoleArn
      Events:
        capabilityStatement:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /metadata
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: capabilityStatement/tsconfig.json
        EntryPoints:
          - capabilityStatement/src/capabilityStatement.ts

  # _status endpoint lambda
  StatusLambdaResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: lambda_resources.yaml
      Parameters:
        CloudWatchKMSKey: !GetAtt SplunkFirehose.Outputs.CloudWatchKMSKey
        SplunkSubscriptionFilterRole: !GetAtt SplunkFirehose.Outputs.SplunkSubscriptionFilterRole
        SplunkDeliveryStream: !GetAtt SplunkFirehose.Outputs.SplunkDeliveryStream
        EnableSplunk: !Ref EnableSplunk
        LambdaName: !Sub "${AWS::StackName}-statusLambda"
        AccessToSpine: "true"
        LogRetentionDays: !Ref LogRetentionDays
  StatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-statusLambda"
      CodeUri: ../packages
      Handler: statusLambda.handler
      Role: !GetAtt StatusLambdaResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          VERSION_NUMBER: !Ref VersionNumber
          COMMIT_ID: !Ref CommitId
          AWS_LAMBDA_EXEC_WRAPPER: /opt/get-secrets-layer
      Layers:
        - !Ref GetSecretsLayer
      Events:
        status:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /_status
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: statusLambda/tsconfig.json
        EntryPoints:
          - statusLambda/src/statusLambda.ts

  # TLS cert for custom domain
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join:
          - "."
          - - !Ref "AWS::StackName"
            - Fn::ImportValue: route53-resources:domain
      DomainValidationOptions:
        - DomainName:
            Fn::Join:
              - "."
              - - !Ref "AWS::StackName"
                - Fn::ImportValue: route53-resources:domain
          HostedZoneId:
            Fn::ImportValue: route53-resources:ZoneID

  # Http api
  HttpApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
      Domain:
        DomainName:
          Fn::Join:
            - "."
            - - !Ref "AWS::StackName"
              - Fn::ImportValue: route53-resources:domain
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId:
            Fn::ImportValue: route53-resources:ZoneID
        EndpointConfiguration: REGIONAL
        SecurityPolicy: TLS_1_2
        MutualTlsAuthentication:
          TruststoreUri:
            "Fn::If":
              - ShouldUseMutualTLS
              - Fn::Join:
                  - "/"
                  - - "s3:/"
                    - !Select [
                        5,
                        !Split [
                          ":",
                          Fn::ImportValue: account-resources:TrustStoreBucket,
                        ],
                      ]
                    - "truststore.pem"
              - !Ref "AWS::NoValue"
          TruststoreVersion:
            "Fn::If":
              - ShouldUseMutualTLS
              - !Ref TruststoreVersion
              - !Ref "AWS::NoValue"
      DisableExecuteApiEndpoint:
        "Fn::If":
          - ShouldUseMutualTLS
          - true
          - !Ref "AWS::NoValue"
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGwAccessLogs.Arn
        Format: "{ \
          \"requestTime\": \"$context.requestTime\", \
          \"apiId\": \"$context.apiId\", \
          \"accountId\": \"$context.accountId\", \
          \"resourcePath\": \"$context.resourcePath\", \
          \"stage\": \"$context.stage\", \
          \"requestId\": \"$context.requestId\", \
          \"extendedRequestId\": \"$context.extendedRequestId\", \
          \"status\": \"$context.status\", \
          \"httpMethod\": \"$context.httpMethod\", \
          \"protocol\": \"$context.protocol\", \
          \"path\": \"$context.path\", \
          \"responseLatency\": \"$context.responseLatency\", \
          \"responseLength\": \"$context.responseLength\",
          \"domainName\": \"$context.domainName\", \
          \"identity\": { \
          \"sourceIp\": \"$context.identity.sourceIp\", \
          \"userAgent\": \"$context.identity.userAgent\", \
          \"clientCert\":{ \
          \"subjectDN\": \"$context.identity.clientCert.subjectDN\", \
          \"issuerDN\": \"$context.identity.clientCert.issuerDN\", \
          \"serialNumber\": \"$context.identity.clientCert.serialNumber\", \
          \"validityNotBefore\": \"$context.identity.clientCert.validity.notBefore\", \
          \"validityNotAfter\": \"$context.identity.clientCert.validity.notAfter\" \
          }}, \
          \"integration\":{ \
          \"error\": \"$context.integration.error\", \
          \"integrationStatus\": \"$context.integration.integrationStatus\", \
          \"latency\": \"$context.integration.latency\", \
          \"requestId\": \"$context.integration.requestId\", \
          \"status\": \"$context.integration.status\" \
          }}"

  ApiGwAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join [
          "/",
          ["/aws/apigateway", !Ref "AWS::StackName", !Sub "${HttpApiGateway}"],
        ]
      RetentionInDays: !Ref LogRetentionDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  ApiGwAccessLogsSplunkSubscriptionFilter:
    Condition: ShouldUseSplunk
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SplunkFirehose.Outputs.SplunkSubscriptionFilterRole
      LogGroupName: !Ref ApiGwAccessLogs
      FilterPattern: "" # All logs
      DestinationArn: !GetAtt SplunkFirehose.Outputs.SplunkDeliveryStream
