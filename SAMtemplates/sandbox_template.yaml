AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  prescriptions for patients api sandbox template

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Architectures:
      - x86_64
    Runtime: nodejs18.x
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        TargetSpineServer: !Ref TargetSpineServer
        TargetServiceSearchServer: !Ref TargetServiceSearchServer
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38"

Parameters:
  TargetSpineServer:
    Type: String
    Description: TargetSpineServer
    Default: none
  TargetServiceSearchServer:
    Type: String
    Description: TargetServiceSearchServer
    Default: none
  TruststoreVersion:
    Type: String
    Description: TruststoreVersion
    Default: none
  EnableMutualTLS:
    Type: String
    Description: Whether to use mutual TLS
    Default: false
    AllowedValues: [true, false]
  EnableSplunk:
    Type: String
    Description: Whether to use splunk
    Default: false
    AllowedValues: [true, false]
  VersionNumber:
    Type: String
    Description: Current release version
    Default: "xxx"
  CommitId:
    Type: String
    Description: Most recent commit hash
    Default: "xxx"
  LogRetentionInDays:
    Type: Number
    Description: How long to keep logs for
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1096,
        1827,
        2192,
        2557,
        2922,
        3288,
        3653,
      ]

Conditions:
  ShouldUseMutualTLS: !Equals [true, !Ref EnableMutualTLS]
  ShouldUseSplunk: !Equals [true, !Ref EnableSplunk]

Resources:

  # sandbox lambda
  SandboxResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: functions/lambda_resources.yaml
      Parameters:
        StackName: AWS::StackName
        LambdaName: !Sub ${AWS::StackName}-Sandbox
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-Sandbox
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream
        EnableSplunk: !Ref EnableSplunk
        LogRetentionInDays: !Ref LogRetentionInDays

  Sandbox:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Sandbox
      CodeUri: ../packages
      Handler: sandbox.handler
      Role: !GetAtt SandboxResources.Outputs.LambdaRoleArn
      Events:
        sandbox:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /Bundle
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        tsconfig: sandbox/tsconfig.json
        EntryPoints:
          - sandbox/src/sandbox.ts

  # capabilityStatement lambda
  CapabilityStatementResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: functions/lambda_resources.yaml
      Parameters:
        StackName: AWS::StackName
        LambdaName: !Sub ${AWS::StackName}-CapabilityStatement
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-CapabilityStatement
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream
        EnableSplunk: !Ref EnableSplunk
        LogRetentionInDays: !Ref LogRetentionInDays
  
  CapabilityStatement:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CapabilityStatement
      CodeUri: ../packages
      Handler: capabilityStatement.handler
      Role: !GetAtt CapabilityStatementResources.Outputs.LambdaRoleArn
      Events:
        capabilityStatement:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /metadata
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        tsconfig: capabilityStatement/tsconfig.json
        EntryPoints:
          - capabilityStatement/src/capabilityStatement.ts

  # _status endpoint lambda
  StatusResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: functions/lambda_resources.yaml
      Parameters:
        StackName: AWS::StackName
        LambdaName: !Sub ${AWS::StackName}-status
        LambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-status
        CloudWatchKMSKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
        SplunkDeliveryStreamArn: !ImportValue lambda-resources:SplunkDeliveryStream
        EnableSplunk: !Ref EnableSplunk
        LogRetentionInDays: !Ref LogRetentionInDays
  
  
  Status:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-status
      CodeUri: ../packages
      Handler: statusLambda.handler
      Role: !GetAtt StatusResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          VERSION_NUMBER: !Ref VersionNumber
          COMMIT_ID: !Ref CommitId
      Events:
        status:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /_status
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: statusLambda/tsconfig.json
        EntryPoints:
          - statusLambda/src/statusLambda.ts

  # TLS cert for custom domain
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join:
          - "."
          - - !Ref "AWS::StackName"
            - Fn::ImportValue: route53-resources:domain
      DomainValidationOptions:
        - DomainName:
            Fn::Join:
              - "."
              - - !Ref "AWS::StackName"
                - Fn::ImportValue: route53-resources:domain
          HostedZoneId:
            Fn::ImportValue: route53-resources:ZoneID

  # Http api
  HttpApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      Domain:
        DomainName:
          Fn::Join:
            - "."
            - - !Ref "AWS::StackName"
              - Fn::ImportValue: route53-resources:domain
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId:
            Fn::ImportValue: route53-resources:ZoneID
        EndpointConfiguration: REGIONAL
        SecurityPolicy: TLS_1_2
        MutualTlsAuthentication:
          TruststoreUri:
            "Fn::If":
              - ShouldUseMutualTLS
              - Fn::Join:
                  - "/"
                  - - "s3:/"
                    - !Select [
                        5,
                        !Split [
                          ":",
                          Fn::ImportValue: account-resources:TrustStoreBucket,
                        ],
                      ]
                    - "sandbox-truststore.pem"
              - !Ref "AWS::NoValue"
          TruststoreVersion:
            "Fn::If":
              - ShouldUseMutualTLS
              - !Ref TruststoreVersion
              - !Ref "AWS::NoValue"
      DisableExecuteApiEndpoint:
        "Fn::If":
          - ShouldUseMutualTLS
          - true
          - !Ref "AWS::NoValue"
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGwAccessLogs.Arn
        Format: "{ \
          \"requestTime\": \"$context.requestTime\", \
          \"apiId\": \"$context.apiId\", \
          \"accountId\": \"$context.accountId\", \
          \"resourcePath\": \"$context.resourcePath\", \
          \"stage\": \"$context.stage\", \
          \"requestId\": \"$context.requestId\", \
          \"extendedRequestId\": \"$context.extendedRequestId\", \
          \"status\": \"$context.status\", \
          \"httpMethod\": \"$context.httpMethod\", \
          \"protocol\": \"$context.protocol\", \
          \"path\": \"$context.path\", \
          \"responseLatency\": \"$context.responseLatency\", \
          \"responseLength\": \"$context.responseLength\",
          \"domainName\": \"$context.domainName\", \
          \"identity\": { \
          \"sourceIp\": \"$context.identity.sourceIp\", \
          \"userAgent\": \"$context.identity.userAgent\", \
          \"clientCert\":{ \
          \"subjectDN\": \"$context.identity.clientCert.subjectDN\", \
          \"issuerDN\": \"$context.identity.clientCert.issuerDN\", \
          \"serialNumber\": \"$context.identity.clientCert.serialNumber\", \
          \"validityNotBefore\": \"$context.identity.clientCert.validity.notBefore\", \
          \"validityNotAfter\": \"$context.identity.clientCert.validity.notAfter\" \
          }}, \
          \"integration\":{ \
          \"error\": \"$context.integration.error\", \
          \"integrationStatus\": \"$context.integration.integrationStatus\", \
          \"latency\": \"$context.integration.latency\", \
          \"requestId\": \"$context.integration.requestId\", \
          \"status\": \"$context.integration.status\" \
          }}"

  ApiGwAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join [
          "/",
          ["/aws/apigateway", !Ref "AWS::StackName", !Sub "${HttpApiGateway}"],
        ]
      RetentionInDays: !Ref LogRetentionInDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  ApiGwAccessLogsSplunkSubscriptionFilter:
    Condition: ShouldUseSplunk
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
      LogGroupName: !Ref ApiGwAccessLogs
      FilterPattern: "" # All logs
      DestinationArn: !ImportValue lambda-resources:SplunkDeliveryStream
